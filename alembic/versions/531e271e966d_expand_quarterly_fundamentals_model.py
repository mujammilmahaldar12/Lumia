"""expand_quarterly_fundamentals_model

Revision ID: 531e271e966d
Revises: 4328628ede68
Create Date: 2025-10-06 01:35:44.477770

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '531e271e966d'
down_revision = '4328628ede68'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_mutual_funds_id'), table_name='mutual_funds')
    op.drop_table('mutual_funds')
    op.drop_index(op.f('ix_etfs_id'), table_name='etfs')
    op.drop_table('etfs')
    op.drop_index(op.f('idx_asset_daily_signals_asset'), table_name='asset_daily_signals')
    op.drop_index(op.f('idx_asset_daily_signals_asset_date'), table_name='asset_daily_signals')
    op.drop_index(op.f('idx_asset_daily_signals_avg_sentiment'), table_name='asset_daily_signals')
    op.drop_index(op.f('idx_asset_daily_signals_date'), table_name='asset_daily_signals')
    op.drop_index(op.f('ix_asset_daily_signals_id'), table_name='asset_daily_signals')
    op.drop_table('asset_daily_signals')
    op.drop_index(op.f('ix_cryptos_id'), table_name='cryptos')
    op.drop_table('cryptos')
    op.add_column('quarterly_fundamentals', sa.Column('price_to_book_ratio', sa.Float(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('price_to_sales_ratio', sa.Float(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('peg_ratio', sa.Float(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('return_on_assets', sa.Float(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('profit_margin', sa.Float(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('operating_margin', sa.Float(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('gross_margin', sa.Float(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('cost_of_revenue', sa.BigInteger(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('gross_profit', sa.BigInteger(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('operating_income', sa.BigInteger(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('ebitda', sa.BigInteger(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('book_value_per_share', sa.Float(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('revenue_per_share', sa.Float(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('total_assets', sa.BigInteger(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('total_liabilities', sa.BigInteger(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('total_equity', sa.BigInteger(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('cash_and_equivalents', sa.BigInteger(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('debt_to_equity_ratio', sa.Float(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('current_ratio', sa.Float(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('quick_ratio', sa.Float(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('operating_cash_flow', sa.BigInteger(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('free_cash_flow', sa.BigInteger(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('capital_expenditure', sa.BigInteger(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('revenue_growth', sa.Float(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('earnings_growth', sa.Float(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('shares_outstanding', sa.BigInteger(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('market_cap', sa.BigInteger(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('enterprise_value', sa.BigInteger(), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True))
    op.add_column('quarterly_fundamentals', sa.Column('last_updated', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('quarterly_fundamentals', 'last_updated')
    op.drop_column('quarterly_fundamentals', 'created_at')
    op.drop_column('quarterly_fundamentals', 'enterprise_value')
    op.drop_column('quarterly_fundamentals', 'market_cap')
    op.drop_column('quarterly_fundamentals', 'shares_outstanding')
    op.drop_column('quarterly_fundamentals', 'earnings_growth')
    op.drop_column('quarterly_fundamentals', 'revenue_growth')
    op.drop_column('quarterly_fundamentals', 'capital_expenditure')
    op.drop_column('quarterly_fundamentals', 'free_cash_flow')
    op.drop_column('quarterly_fundamentals', 'operating_cash_flow')
    op.drop_column('quarterly_fundamentals', 'quick_ratio')
    op.drop_column('quarterly_fundamentals', 'current_ratio')
    op.drop_column('quarterly_fundamentals', 'debt_to_equity_ratio')
    op.drop_column('quarterly_fundamentals', 'cash_and_equivalents')
    op.drop_column('quarterly_fundamentals', 'total_equity')
    op.drop_column('quarterly_fundamentals', 'total_liabilities')
    op.drop_column('quarterly_fundamentals', 'total_assets')
    op.drop_column('quarterly_fundamentals', 'revenue_per_share')
    op.drop_column('quarterly_fundamentals', 'book_value_per_share')
    op.drop_column('quarterly_fundamentals', 'ebitda')
    op.drop_column('quarterly_fundamentals', 'operating_income')
    op.drop_column('quarterly_fundamentals', 'gross_profit')
    op.drop_column('quarterly_fundamentals', 'cost_of_revenue')
    op.drop_column('quarterly_fundamentals', 'gross_margin')
    op.drop_column('quarterly_fundamentals', 'operating_margin')
    op.drop_column('quarterly_fundamentals', 'profit_margin')
    op.drop_column('quarterly_fundamentals', 'return_on_assets')
    op.drop_column('quarterly_fundamentals', 'peg_ratio')
    op.drop_column('quarterly_fundamentals', 'price_to_sales_ratio')
    op.drop_column('quarterly_fundamentals', 'price_to_book_ratio')
    op.create_table('cryptos',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('circulating_supply', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('total_supply', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('max_supply', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('algorithm', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('consensus_mechanism', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('blockchain', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('token_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('contract_address', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('decimals', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('all_time_high', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('all_time_high_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('all_time_low', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('all_time_low_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('block_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('hashing_algorithm', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('launch_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('whitepaper_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('source_code_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('reddit_subscribers', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('twitter_followers', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('telegram_members', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_minable', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['asset_id'], ['assets.id'], name=op.f('cryptos_asset_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('cryptos_pkey')),
    sa.UniqueConstraint('asset_id', name=op.f('cryptos_asset_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_cryptos_id'), 'cryptos', ['id'], unique=False)
    op.create_table('asset_daily_signals',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('avg_sentiment', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('article_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sentiment_7d_avg', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sentiment_30d_avg', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('volatility_30d', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('return_30d', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('return_365d', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('fundamental_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['asset_id'], ['assets.id'], name=op.f('asset_daily_signals_asset_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('asset_daily_signals_pkey'))
    )
    op.create_index(op.f('ix_asset_daily_signals_id'), 'asset_daily_signals', ['id'], unique=False)
    op.create_index(op.f('idx_asset_daily_signals_date'), 'asset_daily_signals', ['date'], unique=False)
    op.create_index(op.f('idx_asset_daily_signals_avg_sentiment'), 'asset_daily_signals', ['avg_sentiment'], unique=False)
    op.create_index(op.f('idx_asset_daily_signals_asset_date'), 'asset_daily_signals', ['asset_id', 'date'], unique=True)
    op.create_index(op.f('idx_asset_daily_signals_asset'), 'asset_daily_signals', ['asset_id'], unique=False)
    op.create_table('etfs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('nav', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('expense_ratio', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('underlying_index', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('index_provider', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('top_10_holdings_weight', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('number_of_holdings', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tracking_error', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('avg_daily_volume', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('inception_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('fund_manager', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('benchmark', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('investment_objective', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['asset_id'], ['assets.id'], name=op.f('etfs_asset_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('etfs_pkey')),
    sa.UniqueConstraint('asset_id', name=op.f('etfs_asset_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_etfs_id'), 'etfs', ['id'], unique=False)
    op.create_table('mutual_funds',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('nav', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('expense_ratio', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('subcategory', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('fund_manager', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('amc_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('minimum_investment', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('minimum_sip', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('exit_load', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('aum', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('alpha', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('beta', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sharpe_ratio', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('standard_deviation', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('return_1yr', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('return_3yr', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('return_5yr', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('return_since_inception', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('inception_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('benchmark', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('investment_objective', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['asset_id'], ['assets.id'], name=op.f('mutual_funds_asset_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('mutual_funds_pkey')),
    sa.UniqueConstraint('asset_id', name=op.f('mutual_funds_asset_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_mutual_funds_id'), 'mutual_funds', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('users_pkey'))
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    # ### end Alembic commands ###
