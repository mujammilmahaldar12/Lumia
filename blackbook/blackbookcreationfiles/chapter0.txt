PROJECT REPORT
SUBMITTED TO
DEPARTMENT OF COMPUTER SCIENCE
BHAVNA TRUST JUNIOR AND DEGREE
COLLEGE OF COMMERCE AND SCIENCE
DEONAR MUMBAI – 400088
(Affiliate by University of Mumbai)
Lumia Robo-Advisor
For Partial Fulfilment for degree of
Bachelor of Science
(COMPUTER SCIENCE)
2025-2026

HEAD OF DEPARTMENTMr. Alok K. Singh
PROJECT GUIDEMrs. Swati Shingate

SUBMITTED BY
MUJAMMIL SALIM MAHALDAR

BHAVNA TRUST JUNIOR AND DEGREE COLLEGE
OF COMMERCE AND SCIENCE
DEONAR MUMBAI - 400088
DEPARTMENT OF COMPUTER SCIENCE
Certificate
This is to certify that
MUJAMMIL SALIM MAHALDAR

of T.Y. B.Sc. (CS). Seat no 22325 has successfully completed the project work in the subject of Project work I as prescribed by University of Mumbai during the year 2025 – 2026.

_____Internal Examiner
_____External Examiner

______HOD
______Stamp

DATE:

DECLARATION

I, Mujammil Salim Mahaldar, hereby declare that the project work titled “Lumia Robo-Advisor”, submitted to Bhavna Trust Junior and Degree College, Maharashtra, is my original work carried out by me in partial fulfilment of the requirements for the Bachelor of Computer Science (B.Sc. CS) degree.
This project has been developed with complete sincerity, dedication, and independent effort. The entire process — from research and design to development and testing — was carefully planned and executed by me. The work presented here has not been submitted to any other university or institution for any degree or diploma.
During the development of the Lumia Robo-Advisor, I implemented a comprehensive full-stack architecture utilizing modern web technologies and financial computing frameworks. The frontend was built using React 18 with TypeScript, Vite build tool, and shadcn/ui component library with Tailwind CSS for professional styling. The backend infrastructure includes a Flask API server (api_server.py) that integrates with a sophisticated roboadvisor module containing specialized components for user profiling (user_profile.py), asset selection (asset_selector.py), portfolio optimization (optimizer.py), advanced metrics calculation (advanced_metrics.py), and recommendation generation (recommender.py).

The database layer utilizes SQLAlchemy ORM with well-defined models including Assets (assets.py), DailyPrice (daily_price.py), QuarterlyFundamental (quarterly_fundamental.py), NewsArticle (news_article.py), and CollectorRun (collector_run.py) for comprehensive financial data management. The system integrates with Supabase for cloud-native authentication and real-time data synchronization. Key Python libraries including Pandas for data manipulation, NumPy for numerical computations, and specialized financial libraries were essential for implementing Modern Portfolio Theory and Mean-Variance Optimization algorithms.

The frontend components include sophisticated interfaces such as DashboardHeader.tsx, NotificationsPanel.tsx, ProfileSettings.tsx, AssetRecommendations.tsx, PerformanceChart.tsx, and PortfolioGeneration.tsx, all built with React hooks and Context API for state management. The notification system provides real-time portfolio alerts, market updates, and goal progress tracking, while the profile management system offers comprehensive security settings and investment preferences.

I referred to various online resources, academic papers on portfolio theory, React documentation, TypeScript best practices, and API documentation for Flask, SQLAlchemy, Supabase, and financial data providers. These references were crucial for implementing the core financial logic, building an interactive user interface, and ensuring proper integration between frontend and backend systems through the Flask API server.
I am sincerely grateful to my project guide and faculty mentors for their valuable guidance, encouragement, and constructive feedback throughout the project. Their constant support and insights have played a vital role in the successful completion of this comprehensive full-stack financial technology application.

I hereby take full responsibility for the authenticity and originality of this project report. It truly reflects my own learning, creativity, and practical understanding of modern software development, financial technology, and full-stack web application architecture.

Sr. No. Name Project Title Institution Signature
1 Bhavna Trust Jr. and Degree College, Maharashtra

Date:

ACKNOWLEDGEMENT
I would like to express my heartfelt gratitude to everyone who supported me in the successful completion of my project, “Lumia Robo-Advisor”. This project has been a significant learning experience, and it would not have been possible without the guidance, encouragement, and support of many individuals.
Firstly, I am deeply grateful to my college, Bhavna Trust Junior and Degree College, and the Department of Computer Science for providing me with the opportunity and resources to undertake this project. I extend my sincere thanks to the Head of Department, Mr. Alok K. Singh, and my project guide, Mrs. Swati Shingate, for their invaluable mentorship, constructive feedback, and unwavering support throughout the development process. Their guidance was instrumental in navigating the complexities of financial modeling and software implementation.
I would also like to acknowledge the immense support provided by the open-source community. The availability of powerful technologies including React 18, TypeScript, Vite, shadcn/ui, Tailwind CSS for frontend development, Flask for API development, Python libraries like Pandas and SQLAlchemy for backend processing, and Supabase for cloud infrastructure was crucial for the development of this project. Online resources, academic papers on Modern Portfolio Theory, React and TypeScript documentation, and financial data APIs provided the foundational knowledge required to build a robust, scalable, and modern full-stack application.
Finally, I wish to thank my family and friends for their constant encouragement and patience. Their support was a source of motivation during challenging times.
Thank you!

ABSTRACT

Lumia is a sophisticated, multi-asset robo-advisor designed to democratize investment management for individual investors through a modern, intelligent web application. The platform addresses the challenges of modern portfolio construction by providing a unified system for analyzing and allocating capital across diverse asset classes, including stocks, ETFs, mutual funds, and cryptocurrencies. Traditional investment approaches are often fragmented, expensive, and lack personalization. Lumia overcomes these limitations by integrating automated data collection, quantitative financial modeling, real-time notifications, comprehensive user profiles, and a highly interactive dashboard into a seamless experience.

The system features a hybrid architecture with a Python 3.10+ backend powered by SQLAlchemy ORM, Supabase database for cloud-native data persistence, and comprehensive data collectors for real-time market information. The analytical core leverages the Pandas library for data manipulation and implements Modern Portfolio Theory principles, specifically Mean-Variance Optimization, to construct portfolios tailored to individual risk tolerance and investment horizons. The frontend is a modern, responsive web application built with React 18, TypeScript, and Vite, featuring shadcn/ui components and Tailwind CSS for a professional user experience.

Key innovations include a comprehensive notification system with real-time portfolio alerts, market updates, and goal progress tracking; advanced user profile management with security settings and investment preferences; interactive portfolio visualizations with currency standardization (INR); AI-powered recommendations through an intelligent asset allocation engine; and seamless user authentication and session management through Supabase Auth.

Data integrity is ensured through a well-defined schema with relational constraints, managed by Alembic migrations and enhanced with Supabase's built-in security features. The modular architecture separates concerns into distinct packages for data collection, database models, core advisory logic, React components, and TypeScript interfaces, promoting maintainability and scalability. Security is comprehensively addressed through environment-based API key management, ORM protection against SQL injection, Supabase Row Level Security (RLS), and frontend authentication guards.

Testing involves a multi-layered approach, including unit tests for core logic, integration tests for the data pipeline, component testing for React interfaces, and end-to-end validation of the complete user journey. The result is a reliable, scalable, and data-driven platform that provides personalized, algorithm-powered investment advice with a professional-grade user interface, making sophisticated financial strategies accessible to a wider audience. The platform successfully demonstrates the integration of modern web technologies with quantitative finance, creating a comprehensive solution for individual portfolio management.

INDEX

| Chapter No. | Title | Page No. |
|:---:|:---|:---:|

CHAPTER 1: INTRODUCTION

| 1.1 | Background | 1 |
| 1.2 | Objectives | 2 |
| 1.3 | Purpose, Scope, and Applicability | 3-5 |
| 1.3.1 | Purpose | 3 |
| 1.3.2 | Scope | 3-4 |
| 1.3.3 | Applicability | 4-5 |
| 1.4 | Achievements | 6 |
| 1.5 | Organisation of Report | 7-8 |

---

CHAPTER 2: SURVEY OF TECHNOLOGIES

| 2.1 | Technology Overview | 9-12 |
| 2.1.1 | Frontend Technologies | 13-16 |
| 2.1.2 | Backend Technologies | 17-20 |
| 2.1.3 | Database and Cloud Infrastructure | 21-24 |
| 2.1.4 | Financial Data and Analytics | 25-28 |
| 2.1.5 | Development and Deployment Tools | 29-32 |
| 2.1.6 | Security Technologies | 33-36 |
| 2.1.7 | User Experience Technologies | 37-40 |

---

CHAPTER 3: REQUIREMENTS AND ANALYSIS

| 3.1 | Problem Definition | 13-14 |
| 3.2 | Requirements Specification | 15 |
| 3.3 | Planning and Scheduling | 16-19 |
| 3.4 | Software and Hardware Requirements | 20-22 |
| 3.5 | Preliminary Product Description | 23-24 |
| 3.6 | Conceptual Models | 25-26 |

---

CHAPTER 4: SYSTEM DESIGN

| 4.1 | Basic Modules | 27-32 |
| 4.2 | Data Design | 33-43 |
| 4.2.1 | Schema Design | 33-36 |
| 4.2.2 | Data Integrity and Constraints | 37-43 |
| 4.3 | Procedural Design | 44-46 |
| 4.3.1 | Logic Diagrams | 44 |
| 4.3.2 | Data Structures | 45 |
| 4.3.3 | Algorithms Design | 45-46 |
| 4.4 | User Interface Design | 47-56 |
| 4.5 | Security Issues | 57-60 |
| 4.6 | Test Cases Design | 61-64 |

---

CHAPTER 5: IMPLEMENTATION AND TESTING

| 5.1 | Implementation Approaches | 65 |
| 5.2 | Coding Details and Code Efficiency | 66-67 |
| 5.2.1 | Code Efficiency | 66-67 |
| 5.3 | Testing Approach | 68-70 |
| 5.3.1 | Unit Testing | 68 |
| 5.3.2 | Integrated Testing | 69 |
| 5.3.3 | Performance Testing | 69-70 |
| 5.4 | Modifications and Improvements | 70 |
| 5.5 | Test Cases | 71-73 |



---
as you created chapter 4 now i want you to create chapter 5 with this topics CHAPTER 5: IMPLEMENTATION AND TESTING


CHAPTER 6: RESULTS AND DISCUSSION

| 6.1 | Test Reports | 74-77 |
| 6.2 | User Documentation | 78-80 |

---

CHAPTER 7: CONCLUSIONS

| 7.1 | Conclusion | 81 |
| 7.1.1 | Significance of the System | 81 |
| 7.2 | Future Scope of the Project | 82 |
| 7.3 | References | 83 |

---

End of Index